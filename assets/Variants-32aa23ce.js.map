{"version":3,"file":"Variants-32aa23ce.js","sources":["../../stories/utils/randomColor.ts","../../stories/utils/ExampleComponent.tsx","../../stories/utils/GridBox.tsx","../../stories/utils/Variants.tsx"],"sourcesContent":["import { token, Token } from '@committed/ds-ss'\n\nconst keys = ['primary', 'secondary', 'info', 'success', 'error', 'warning']\ntype Depth = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9\n\nexport const randomColor = (depth: Depth = 5) => {\n  const color = keys[Math.floor(Math.random() * keys.length)]\n  return token(`colors.$${color}.${depth}` as Token)\n}\n","import { Box } from '@committed/ds'\nimport { SystemStyleObject } from '@committed/ds-ss'\nimport React from 'react'\nimport { randomColor } from './randomColor'\n\ntype BoxProps = React.ComponentProps<typeof Box>\ntype ExampleComponentProps = Omit<BoxProps, 'css'> & {\n  width?: SystemStyleObject['width']\n  height?: SystemStyleObject['height']\n}\n\nexport const ExampleComponent: React.FC<ExampleComponentProps> = ({\n  height = '100px',\n  width = '100%',\n  ...props\n}) => (\n  <Box\n    css={{\n      p: '$2',\n      border: '1px solid token(colors.$neutral.3)',\n    }}\n    style={{\n      width,\n      height,\n      backgroundColor: randomColor(),\n    }}\n    {...props}\n  />\n)\n","import { Box } from '@committed/ds'\nimport { SystemStyleObject } from '@committed/ds-ss'\nimport React from 'react'\nimport { randomColor } from './randomColor'\n\ntype BoxProps = React.ComponentProps<typeof Box>\n\ntype GridBoxProps = Omit<BoxProps, 'css'> & {\n  css?: SystemStyleObject\n}\n\nexport const GridBox: React.FC<GridBoxProps> = ({ css, ...props }) => (\n  <Box\n    css={{\n      minWidth: '$5',\n      minHeight: '$5',\n      p: '$2',\n      border: '1px solid token(colors.$neutral.3)',\n      ...css,\n    }}\n    style={{\n      backgroundColor: randomColor(),\n    }}\n    {...props}\n  />\n)\n","// @ts-nocheck\nimport { Grid, Tooltip } from '@committed/ds'\nimport { SystemStyleObject } from '@committed/ds-ss'\nimport { ElementType, Fragment } from 'react'\n\nconst arr = <T extends unknown>(v: T | Array<T>): Array<T> =>\n  Array.isArray(v) ? v : [v]\n\n// eslint-disable-next-line prefer-spread\nconst flatten = <T extends unknown>(arr: Array<T>) => [].concat.apply([], arr)\nconst cartesianProduct = (props: { [x: string]: any }): { [x: string]: any } =>\n  Object.keys(props)\n    .map((k) => arr(props[k]).map((v) => [k, v]))\n    .reduce(\n      (acc, set) => flatten(acc.map((x) => set.map((y) => [...x, y]))),\n      [[]],\n    )\n    .map((pairsArr) =>\n      pairsArr.reduce((result, [k, v]) => ({ ...result, [k]: v }), {}),\n    )\n\ntype ArrayProps<Props> = { [K in keyof Props]: Array<Props[K]> }\n\nexport const Variants = <T extends ElementType>({\n  gridCss = { gridTemplateColumns: '1fr 1fr 1fr 1fr' },\n  component,\n  container = Fragment,\n  ...props\n}: {\n  gridCss?: SystemStyleObject\n  container?: () => ReactElement<any, any>\n  component: T // (props: P) => ReactElement<any, any>\n} & ArrayProps<ComponentProps<T>>) => {\n  const combinations = cartesianProduct(props)\n  const Component = component\n  const Container = container\n\n  return (\n    <Grid gap css={gridCss}>\n      <>\n        {combinations.map((props, i: number) => {\n          const { css, children, ...display } = props\n          return (\n            <Container key={i}>\n              <Tooltip content={<pre>{JSON.stringify(display, null, 2)}</pre>}>\n                <Component {...props} />\n              </Tooltip>\n            </Container>\n          )\n        })}\n      </>\n    </Grid>\n  )\n}\n"],"names":["keys","randomColor","depth","color","token","ExampleComponent","height","width","props","jsx","Box","GridBox","css","arr","v","flatten","arr2","cartesianProduct","k","acc","set","x","y","pairsArr","result","Variants","gridCss","component","container","Fragment2","combinations","Component","Container","Grid","Fragment","props2","i","children","display","Tooltip"],"mappings":"gQAEA,MAAMA,EAAO,CAAC,UAAW,YAAa,OAAQ,UAAW,QAAS,SAAS,EAG9DC,EAAc,CAACC,EAAe,IAAM,CACzC,MAAAC,EAAQH,EAAK,KAAK,MAAM,KAAK,SAAWA,EAAK,MAAM,CAAC,EAC1D,OAAOI,EAAM,WAAWD,CAAK,IAAID,CAAK,EAAW,CACnD,ECGOG,EAAA,CAAA,CAA2D,OAAAC,EAAA,QACvD,MAAAC,EAAA,OACD,GAAAC,CAEV,IAAAC,EACEC,EAAC,CAAA,IAAA,CACM,EAAA,KACA,OAAA,oCACK,EACV,MAAA,CACO,MAAAH,EACL,OAAAD,EACA,gBAAAL,EAAA,CAC6B,EAC/B,GAAAO,CACI,CACN,m3EChBK,MAAAG,EAAA,CAAA,CAAA,IAAAC,EAAA,GAAAJ,CAAA,IAAAC,EACLC,EAAC,CAAA,IAAA,CACM,SAAA,KACO,UAAA,KACC,EAAA,KACR,OAAA,qCACK,GAAAE,CACL,EACL,MAAA,CACO,gBAAAX,EAAA,CACwB,EAC/B,GAAAO,CACI,CACN,i0DCnBF,MAAAK,EAAAC,GAAA,MAAA,QAAAA,CAAA,EAAAA,EAAA,CAAAA,CAAA,EAIAC,EAAAC,GAAA,CAAA,EAAA,OAAA,MAAA,CAAA,EAAAA,CAAA,EACAC,EAAAT,GAAA,OAAA,KAAAA,CAAA,EAAA,IAAAU,GAAAL,EAAAL,EAAAU,CAAA,CAAA,EAAA,IAAAJ,GAAA,CAAAI,EAAAJ,CAAA,CAAA,CAAA,EAAA,OAGK,CAAAK,EAAAC,IAAAL,EAAAI,EAAA,IAAAE,GAAAD,EAAA,IAAAE,GAAA,CAAA,GAAAD,EAAAC,CAAA,CAAA,CAAA,CAAA,EACgE,CAAA,EAAA,CAEjE,EAAA,IACCC,GAAAA,EAAA,OAAA,CAAAC,EAAA,CAAAN,EAAAJ,CAAA,KAAA,CAAA,GAAAU,EAAA,CAAAN,CAAA,EAAAJ,CAAA,GAAA,CAAA,CAAA,CAED,EAIGW,EAAA,CAAA,CAAyC,QAAAC,EAAA,CAAA,oBAAA,iBAAA,EACK,UAAAC,EACnD,UAAAC,EAAAC,EAAA,SACY,GAAArB,CAEd,IAAA,CAKE,MAAAsB,EAAAb,EAAAT,CAAA,EACAuB,EAAAJ,EACAK,EAAAJ,EAEA,OAAAnB,EAAAwB,EAAA,CAAA,IAAA,GAAA,IAAAP,EAAA,SAAAjB,EAAAyB,EAAA,CAAA,SAAAJ,EAAA,IAAA,CAAAK,EAAAC,IAAA,CAIQ,KAAA,CAAA,IAAAxB,EAAA,SAAAyB,EAAA,GAAAC,CAAA,EAAAH,EACA,OAAA1B,EAAAuB,EAAA,CAAA,SAAAvB,EAAA8B,EAAA,CAAA,QAAA9B,EAAA,MAAA,CAAA,SAAA,KAAA,UAAA6B,EAAA,KAAA,CAAA,CAAA,CAAA,EAAA,SAAA7B,EAAAsB,EAAA,CAAA,GAAAI,CAAA,CAAA,CAAA,CAAA,CAAA,EAAAC,CAAA,CAKE,CAAA,CAAA,CAAA,CAAA,CAAA,CAMZ"}