{"version":3,"file":"Text-561f173c.js","sources":["../../../../packages/ds/dist/components/Text/Text.js"],"sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { css, cva, cx, styled } from '@committed/ds-ss';\nimport { component, forwardRefExtend, } from '../../utils';\nexport const TEXT_CLASS = 'c-text';\nexport const PARAGRAPH_CLASS = 'c-paragraph';\nexport const SPAN_CLASS = 'c-span';\nexport const STRIKE_CLASS = 'c-strike';\nexport const MONOSPACE_CLASS = 'c-monospace';\nexport const CAPTION_CLASS = 'c-caption';\nexport const text = cva({\n    base: {\n        lineHeight: '1',\n        fontVariantNumeric: 'tabular-nums',\n    },\n    variants: {\n        size: {\n            '$-2': {\n                fontSize: '$-2',\n                lineHeight: '$body',\n            },\n            '$-1': {\n                fontSize: '$-1',\n                lineHeight: '$body',\n            },\n            $0: {\n                fontSize: '$0',\n                lineHeight: '$body',\n            },\n            $1: {\n                fontSize: '$1',\n                lineHeight: '$body',\n            },\n            $2: {\n                fontSize: '$2',\n                lineHeight: '$body',\n            },\n            $3: {\n                fontSize: '$3',\n                lineHeight: '$body',\n            },\n            $4: {\n                fontSize: '$4',\n                lineHeight: '$body',\n            },\n            $5: {\n                fontSize: '$5',\n                letterSpacing: '$tight',\n                lineHeight: '$tight',\n            },\n            $6: {\n                fontSize: '$6',\n                lineHeight: '$tight',\n                letterSpacing: '$tight',\n            },\n            $7: {\n                fontSize: '$7',\n                letterSpacing: '$tighter',\n                lineHeight: '$tight',\n                textIndent: '-.005em',\n            },\n            $8: {\n                fontSize: '$8',\n                letterSpacing: '$tighter',\n                lineHeight: '$tight',\n                textIndent: '-.018em',\n            },\n        },\n        weight: {\n            regular: { fontWeight: '$regular' },\n            bold: { fontWeight: '$bold' },\n            light: { fontWeight: '$light' },\n        },\n        font: {\n            default: { fontFamily: '$text' },\n            display: { fontFamily: '$display' },\n            system: { fontFamily: '$system' },\n            monospace: { fontFamily: '$monospace' },\n        },\n        italic: {\n            true: {\n                fontStyle: 'italic',\n            },\n        },\n        nowrap: {\n            true: {\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n                whiteSpace: 'nowrap',\n            },\n        },\n    },\n    defaultVariants: {\n        size: '$0',\n        weight: 'regular',\n        font: 'default',\n    },\n});\nconst inlineCss = css({ display: 'inline' });\n/**\n * Text component covers all text use in the components.\n *\n * Prefer styling using the supplied props options, but the standard css is also available if required.\n *\n * A set of pre-configured components are also supplied for common use cases. These all use the same underlying Text component.\n */\nexport const Text = styled(component('span', TEXT_CLASS), text);\nText.displayName = 'Text';\nconst paragraphCss = css({ display: 'block', mb: '$3' });\nexport const Paragraph = component(styled('p', text), PARAGRAPH_CLASS, paragraphCss);\nParagraph.displayName = 'Paragraph';\nconst captionCss = css({\n    fontSize: '$-2',\n    lineHeight: '$body',\n});\n/**\n * Captions styles the text for use in a caption. This remain polymorphic, so the component type can be set to `caption` or `figcaption` if required.\n */\nexport const Caption = component(styled('caption', text), CAPTION_CLASS, captionCss);\nCaption.displayName = 'Caption';\n/**\n * Convenience export of text with the `span` tag\n */\nexport const Span = component(styled('span', text), SPAN_CLASS, inlineCss);\nSpan.displayName = 'Span';\n/**\n * Convenience export of text with the `strikethrough` tag\n */\nexport const Strike = component(styled('s', text), STRIKE_CLASS, inlineCss);\nStrike.displayName = 'Strike';\n/**\n * Convenience export of text with the monospace font and `pre` tag (or 'span' if marked `inline`)\n */\nexport const Monospace = forwardRefExtend((_a, forwardedRef) => {\n    var { inline = false, className, children } = _a, props = __rest(_a, [\"inline\", \"className\", \"children\"]);\n    const MonoComponent = inline ? 'span' : 'pre';\n    return (_jsx(Text, Object.assign({ asChild: true, className: cx(MONOSPACE_CLASS, className, inlineCss), font: \"monospace\" }, props, { ref: forwardedRef, children: _jsx(MonoComponent, { children: children }) })));\n});\nMonospace.displayName = 'Monospace';\n"],"names":["__rest","this","s","e","t","p","i","TEXT_CLASS","PARAGRAPH_CLASS","SPAN_CLASS","STRIKE_CLASS","MONOSPACE_CLASS","CAPTION_CLASS","text","cva","inlineCss","css","Text","styled","component","paragraphCss","Paragraph","captionCss","Caption","Span","Strike","Monospace","forwardRefExtend","_a","forwardedRef","inline","className","children","props","MonoComponent","_jsx","cx"],"mappings":"wHAAA,IAAIA,EAAUC,YAAQA,WAAK,QAAW,SAAUC,EAAGC,EAAG,CAClD,IAAIC,EAAI,CAAA,EACR,QAASC,KAAKH,EAAO,OAAO,UAAU,eAAe,KAAKA,EAAGG,CAAC,GAAKF,EAAE,QAAQE,CAAC,EAAI,IAC9ED,EAAEC,CAAC,EAAIH,EAAEG,CAAC,GACd,GAAIH,GAAK,MAAQ,OAAO,OAAO,uBAA0B,WACrD,QAASI,EAAI,EAAGD,EAAI,OAAO,sBAAsBH,CAAC,EAAGI,EAAID,EAAE,OAAQC,IAC3DH,EAAE,QAAQE,EAAEC,CAAC,CAAC,EAAI,GAAK,OAAO,UAAU,qBAAqB,KAAKJ,EAAGG,EAAEC,CAAC,CAAC,IACzEF,EAAEC,EAAEC,CAAC,CAAC,EAAIJ,EAAEG,EAAEC,CAAC,CAAC,GAE5B,OAAOF,CACX,EAIO,MAAMG,EAAa,SACbC,EAAkB,cAClBC,EAAa,SACbC,EAAe,WACfC,EAAkB,cAClBC,EAAgB,YAChBC,EAAOC,EAAI,CACpB,KAAM,CACF,WAAY,IACZ,mBAAoB,cACvB,EACD,SAAU,CACN,KAAM,CACF,MAAO,CACH,SAAU,MACV,WAAY,OACf,EACD,MAAO,CACH,SAAU,MACV,WAAY,OACf,EACD,GAAI,CACA,SAAU,KACV,WAAY,OACf,EACD,GAAI,CACA,SAAU,KACV,WAAY,OACf,EACD,GAAI,CACA,SAAU,KACV,WAAY,OACf,EACD,GAAI,CACA,SAAU,KACV,WAAY,OACf,EACD,GAAI,CACA,SAAU,KACV,WAAY,OACf,EACD,GAAI,CACA,SAAU,KACV,cAAe,SACf,WAAY,QACf,EACD,GAAI,CACA,SAAU,KACV,WAAY,SACZ,cAAe,QAClB,EACD,GAAI,CACA,SAAU,KACV,cAAe,WACf,WAAY,SACZ,WAAY,SACf,EACD,GAAI,CACA,SAAU,KACV,cAAe,WACf,WAAY,SACZ,WAAY,SACf,CACJ,EACD,OAAQ,CACJ,QAAS,CAAE,WAAY,UAAY,EACnC,KAAM,CAAE,WAAY,OAAS,EAC7B,MAAO,CAAE,WAAY,QAAU,CAClC,EACD,KAAM,CACF,QAAS,CAAE,WAAY,OAAS,EAChC,QAAS,CAAE,WAAY,UAAY,EACnC,OAAQ,CAAE,WAAY,SAAW,EACjC,UAAW,CAAE,WAAY,YAAc,CAC1C,EACD,OAAQ,CACJ,KAAM,CACF,UAAW,QACd,CACJ,EACD,OAAQ,CACJ,KAAM,CACF,SAAU,SACV,aAAc,WACd,WAAY,QACf,CACJ,CACJ,EACD,gBAAiB,CACb,KAAM,KACN,OAAQ,UACR,KAAM,SACT,CACL,CAAC,EACKC,EAAYC,EAAI,CAAE,QAAS,QAAU,CAAA,EAQ9BC,EAAOC,EAAOC,EAAU,OAAQZ,CAAU,EAAGM,CAAI,EAC9DI,EAAK,YAAc,OACnB,MAAMG,EAAeJ,EAAI,CAAE,QAAS,QAAS,GAAI,IAAI,CAAE,EAC1CK,EAAYF,EAAUD,EAAO,IAAKL,CAAI,EAAGL,EAAiBY,CAAY,EACnFC,EAAU,YAAc,YACxB,MAAMC,EAAaN,EAAI,CACnB,SAAU,MACV,WAAY,OAChB,CAAC,EAIYO,EAAUJ,EAAUD,EAAO,UAAWL,CAAI,EAAGD,EAAeU,CAAU,EACnFC,EAAQ,YAAc,UAIV,MAACC,EAAOL,EAAUD,EAAO,OAAQL,CAAI,EAAGJ,EAAYM,CAAS,EACzES,EAAK,YAAc,OAIP,MAACC,EAASN,EAAUD,EAAO,IAAKL,CAAI,EAAGH,EAAcK,CAAS,EAC1EU,EAAO,YAAc,SAIT,MAACC,EAAYC,EAAiB,CAACC,EAAIC,IAAiB,CAC5D,GAAI,CAAE,OAAAC,EAAS,GAAO,UAAAC,EAAW,SAAAC,CAAU,EAAGJ,EAAIK,EAAQjC,EAAO4B,EAAI,CAAC,SAAU,YAAa,UAAU,CAAC,EACxG,MAAMM,EAAgBJ,EAAS,OAAS,MACxC,OAAQK,EAAKlB,EAAM,OAAO,OAAO,CAAE,QAAS,GAAM,UAAWmB,EAAGzB,EAAiBoB,EAAWhB,CAAS,EAAG,KAAM,WAAW,EAAIkB,EAAO,CAAE,IAAKJ,EAAc,SAAUM,EAAKD,EAAe,CAAE,SAAUF,EAAU,CAAC,CAAE,CAAC,CACrN,CAAC,EACDN,EAAU,YAAc"}